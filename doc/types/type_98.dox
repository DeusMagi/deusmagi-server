/**
@var SIGN
See @ref page_type_98
*/

/**
@page page_type_98 Sign


@section Description
		The purpose of a sign or magic mouth is to display a certain
		message to the player. There are three ways to have the player
		get this message:

		The player walking onto it (magic mouth), the player pressing
		apply (sign) or the player triggering a button/handle/etc (magic mouth).
	



Type defined by:
- @ref object::type = 98


@section Attributes

<table>
	<tr>
		<th>Attribute</th>
		<th>Field</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>action</td>
		<td>@ref page_custom_attributes "notification_action"</td>
		<td>			Action to execute when the notification is triggered - either a
			keybinding macro (starting with a question mark, for example,
			?HELP), or a command beginning with a slash.
		</td>
	</tr>
	<tr>
		<td>activate by flying</td>
		<td>@ref FLAG_FLY_ON</td>
		<td>		If set, the player gets the message when flying (=levitating)
		ontop of the object. Usually this should be set together with
		walk_on.
		</td>
	</tr>
	<tr>
		<td>activate by walking</td>
		<td>@ref FLAG_WALK_ON</td>
		<td>		If set, the player gets the message when walking ontop of the
		object. This is the typical configuration for a magic mouth: The
		player walks through a dungeon and suddenly he gets a message.
		Use this to create some roleplay atmosphere, and to inform the
		player about possible dangers or secrets.
		</td>
	</tr>
	<tr>
		<td>adjacent direction</td>
		<td>@ref FLAG_SPLITTING</td>
		<td>		If direction is set and this is set as well, two adjacent directions
		will be considered instead of just the one direction.
		</td>
	</tr>
	<tr>
		<td>align</td>
		<td>@ref obj::align</td>
		<td>		X align of the object on the map.
		</td>
	</tr>
	<tr>
		<td>alpha</td>
		<td>@ref obj::alpha</td>
		<td>		Alpha value of the object.
		</td>
	</tr>
	<tr>
		<td>anim speed</td>
		<td>@ref obj::anim_speed</td>
		<td>		How fast to play this animation.
		</td>
	</tr>
	<tr>
		<td>animation</td>
		<td>@ref obj::animation_id</td>
		<td>		The animation-name defines what animation is displayed for this
		object in-game. Note that a set animation will overrule the face.
		</td>
	</tr>
	<tr>
		<td>block view</td>
		<td>@ref FLAG_BLOCKSVIEW</td>
		<td>		If an item is set to block view, players (and monsters) cannot
		see beyond it unless they cross it or manage to stand on top of
		it.
		</td>
	</tr>
	<tr>
		<td>connection</td>
		<td>@ref page_connected "connection value"</td>
		<td>		When a connection value is set, the message will be printed
		whenever the connection is triggered. This should be used in
		combination with &lt;invisible&gt; enabled and
		&lt;activate by walking/flying&gt; disabled. If activating your
		magic mouth this way, the message will not only be printed to one
		player, but all players on the current map.
		</td>
	</tr>
	<tr>
		<td>counter</td>
		<td>@ref liv::food</td>
		<td>		If a counter value is set (greater than zero), the sign/magic
		mouth can be applied (printing the message) only that many times.
		For signs this really shouldn't be used, while for magic mouths
		it is extremely helpful. Monsters walking over the magic mouth do
		not decrease the counter.

		Often, you might want to have a message displayed only once. For
		example: The player enters your map and you put a magic mouth to
		tell him about the monsters and how dangerous they look and all.
		Later, when all the monsters are killed and the player leaves the
		map, displaying the same message a second time would be silly.
		&lt;counter&gt; 1 does a perfect job in such cases. Otherwise set
		&lt;counter&gt; zero/unset for infinite use (that is the
		default).
		</td>
	</tr>
	<tr>
		<td>cursed</td>
		<td>@ref FLAG_CURSED</td>
		<td>		The item is cursed. This object can't be removed when wielded or
		worn (without uncursing it). Remove curse will remove this flag.
		</td>
	</tr>
	<tr>
		<td>damned</td>
		<td>@ref FLAG_DAMNED</td>
		<td>		Stronger form of curse. Item can't be removed when wielded or
		worn. Remove damnation will remove this flag.
		</td>
	</tr>
	<tr>
		<td>delay</td>
		<td>@ref page_custom_attributes "notification_delay"</td>
		<td>			Time in milliseconds that the notification will stay visible.
			About 5 seconds before the time runs out, the notification will
			start fading out (thus, the client forces the delay to be at least
			5 seconds, even if you use a smaller value). The default delay is
			30 seconds.
		</td>
	</tr>
	<tr>
		<td>direction</td>
		<td>@ref obj::direction</td>
		<td>		The object's direction.
		</td>
	</tr>
	<tr>
		<td>direction based drawing</td>
		<td>@ref FLAG_DRAW_DIRECTION</td>
		<td>		If enabled, the object will be shown depending on its direction
		and player's position. Usually used by wall decoration so the
		decoration doesn't appear from both sides of the wall.
		</td>
	</tr>
	<tr>
		<td>glow radius</td>
		<td>@ref obj::glow_radius</td>
		<td>		If &lt;glow radius&gt; is set to a value greater than zero, the
		object appears lit up on dark maps. &lt;glow radius&gt; can be a
		value between 0 and 4, the higher, the more light does the object
		emit.
		</td>
	</tr>
	<tr>
		<td>height</td>
		<td>@ref obj::z</td>
		<td>		Adjusts Y position of the object as it appears on the map.
		</td>
	</tr>
	<tr>
		<td>horizontal zoom</td>
		<td>@ref obj::zoom_x</td>
		<td>		How much to horizontally zoom the object on the map.
		</td>
	</tr>
	<tr>
		<td>identified</td>
		<td>@ref FLAG_IDENTIFIED</td>
		<td>		If an item is identified, the player has full knowledge about it.
		</td>
	</tr>
	<tr>
		<td>ignore connection push</td>
		<td>@ref FLAG_CONNECT_NO_PUSH</td>
		<td>		If set, connection triggers that were done because something (such
		as a button being pressed) was pushed will be ignored.
		</td>
	</tr>
	<tr>
		<td>ignore connection release</td>
		<td>@ref FLAG_CONNECT_NO_RELEASE</td>
		<td>		If set, connection triggers that were done because something (such
		as a button being unpressed) was released will be ignored.
		</td>
	</tr>
	<tr>
		<td>image</td>
		<td>@ref obj::face</td>
		<td>		The image name defines what image is displayed for this object
		in-game.
		</td>
	</tr>
	<tr>
		<td>inv. system object</td>
		<td>@ref FLAG_SYS_OBJECT</td>
		<td>		Marks an object as system object. System objects are ALWAYS
		invisible and hidden from the players.

		System objects are put in layer 0.
		</td>
	</tr>
	<tr>
		<td>invisible</td>
		<td>@ref FLAG_IS_INVISIBLE</td>
		<td>		Generally makes the object invisible. Invisible objects will be
		shown if the player has "see invisible" (from an item). To hide
		objects totally from detection, use "sys_object".
		</td>
	</tr>
	<tr>
		<td>is animated</td>
		<td>@ref FLAG_ANIMATE</td>
		<td>		If set, the object is animated and animation is used.

		Note: Some special objects will use an animation NOT as animation
		but as frame list. Examples are buttons (which frames are changed
		by the object status of the button). IS_TURNABLE will enable
		direction turning for some object types. These flags are all
		system related. Be VERY careful when changing them.
		</td>
	</tr>
	<tr>
		<td>is turnable</td>
		<td>@ref FLAG_IS_TURNABLE</td>
		<td>		System flag. Object can be turned into directions.
		</td>
	</tr>
	<tr>
		<td>layer</td>
		<td>@ref obj::layer</td>
		<td>		This is the map layer the object will put in. The selected layer
		will affect where and how this object is shown on the client side.
		Layer 0 is reserved for sys_object type objects and will NEVER be
		shown on the client side. Layer 1 is for floor objects and layer 2
		for floor masks. Layer 3 and 4 are for items on the ground. Layer
		5 is for walls, layer 6 is reserved for players and layer 7 is
		for spell effects and high flying/visible objects like arrows.
		</td>
	</tr>
	<tr>
		<td>magical</td>
		<td>@ref FLAG_IS_MAGICAL</td>
		<td>		If set, this object counts as "magical". Detect magic or identify
		will show this flag and the player will see a small blue M in the
		client's inventory part.
		</td>
	</tr>
	<tr>
		<td>match = having</td>
		<td>@ref obj::last_sp</td>
		<td>		Enabled means having that object is a match. Disabled means not
		having that object is a match.
		</td>
	</tr>
	<tr>
		<td>match = slaying field</td>
		<td>@ref liv::sp</td>
		<td>		Enabled means key text is compared to the slaying field of an
		object and NOT to the name.
		</td>
	</tr>
	<tr>
		<td>match arch name</td>
		<td>@ref obj::race</td>
		<td>		This string specifies the object we are looking for: We have a
		match if the player does/don't carry an object of archetype
		&lt;match arch name&gt;.
		</td>
	</tr>
	<tr>
		<td>match key string</td>
		<td>@ref obj::slaying</td>
		<td>		This string specifies the object we are looking for: We have a
		match if the player does/don't carry a key object or a mark with
		identical &lt;key string&gt;. This string is compared to the name
		of an object. If the "match = slaying field" is set, the text is
		compared to the slaying field of the object we search for. This
		can make sense if we really want avoid any problems with user set
		names of objects.
		</td>
	</tr>
	<tr>
		<td>match type</td>
		<td>@ref liv::hp</td>
		<td>		This value specifies the object we are looking for: We have a
		match if the player does/don't carry an object that is of type
		&lt;match type&gt;.
		</td>
	</tr>
	<tr>
		<td>material</td>
		<td>@ref obj::material_real</td>
		<td>		The material defines the exact material of which the object
		consists. It is much more specific than &lt;material class&gt;,
		however only one material can be selected, not multiple.

		&lt;material&gt; is not required to be set, it can be left
		'undefined'.
		</td>
	</tr>
	<tr>
		<td>material class</td>
		<td>@ref obj::material</td>
		<td>		This bitmask-value informs the player of which basic material(s)
		the object consists. Material class does also affect how likely
		the object can be destroyed by hazardous spell-effects, like
		firestorm.
		</td>
	</tr>
	<tr>
		<td>message</td>
		<td>@ref page_custom_attributes "notification_message"</td>
		<td>			Notification message to show below the map name.
		</td>
	</tr>
	<tr>
		<td>message</td>
		<td>@ref obj::msg</td>
		<td>		This text will be displayed to the player.
		</td>
	</tr>
	<tr>
		<td>name</td>
		<td>@ref obj::name</td>
		<td>		This is the name of the object, displayed to the player.
		</td>
	</tr>
	<tr>
		<td>no spells</td>
		<td>@ref FLAG_NO_MAGIC</td>
		<td>		If enabled, it is impossible for players to use spells on that
		spot.
		</td>
	</tr>
	<tr>
		<td>no teleport</td>
		<td>@ref FLAG_NO_TELEPORT</td>
		<td>		Marks an object as no teleport object. A no teleport object can't
		be teleported by teleporter except if the object is inside the
		inventory of another object which can be teleported.
		</td>
	</tr>
	<tr>
		<td>non-pickable</td>
		<td>@ref FLAG_NO_PICK</td>
		<td>		If set, the object cannot be picked up (neither by players nor
		monsters).
		</td>
	</tr>
	<tr>
		<td>number</td>
		<td>@ref obj::nrof</td>
		<td>		This value determines the number of objects in one stack (for
		example: 100 goldcoins =&gt; "number = 100"). You should set this
		at least to one, for any pickable object - otherwise it won't be
		mergeable into a stack.
		</td>
	</tr>
	<tr>
		<td>one drop</td>
		<td>@ref FLAG_ONE_DROP</td>
		<td>		If this flag is set for an item inside monster's quest_container
		with the quest being quest item type, the player will only be able
		to get this item once.
		</td>
	</tr>
	<tr>
		<td>permanent cursed</td>
		<td>@ref FLAG_PERM_CURSED</td>
		<td>		The item is permanently cursed. If this flag is set, applying or
		unapplying it will set "cursed 1" again. This flag can't be
		removed by remove curse.
		</td>
	</tr>
	<tr>
		<td>permanent damned</td>
		<td>@ref FLAG_PERM_DAMNED</td>
		<td>		The item is permanently damned. If this flag is set, applying or
		unapplying it will set "damned 1" again. This flag can't be
		removed by remove damnation.
		</td>
	</tr>
	<tr>
		<td>player only</td>
		<td>@ref FLAG_PLAYER_ONLY</td>
		<td>		If set, only players can enter the tile the object with this flag
		is on.
		</td>
	</tr>
	<tr>
		<td>reflect missiles</td>
		<td>@ref FLAG_REFL_MISSILE</td>
		<td>		Object will reflect missiles.
		</td>
	</tr>
	<tr>
		<td>reflect spells</td>
		<td>@ref FLAG_REFL_SPELL</td>
		<td>		Object will reflect spells.
		</td>
	</tr>
	<tr>
		<td>rotate</td>
		<td>@ref obj::rotate</td>
		<td>		Rotation value of the object in degrees.
		</td>
	</tr>
	<tr>
		<td>shortcut</td>
		<td>@ref page_custom_attributes "notification_shortcut"</td>
		<td>			Keybinding macro that will be temporarily used for the notification -
			for example, one could use ?CONSOLE to make the enter key (default)
			execute the notification action - until the notification disappears
			(fade out, or dismissed by actually triggering its action).
		</td>
	</tr>
	<tr>
		<td>sound effect</td>
		<td>@ref obj::title</td>
		<td>		Optional sound effect to play when the sign is read (or triggered,
		in case of magic mouths).
		</td>
	</tr>
	<tr>
		<td>stackable</td>
		<td>@ref FLAG_CAN_STACK</td>
		<td>		If set, the item can be stacked. Careful, don't use on rings or
		other applyable items, it will lead to side effects.

		Missiles are designed to be used as stacks for example.
		</td>
	</tr>
	<tr>
		<td>start speed</td>
		<td>@ref obj::speed_left</td>
		<td>		When an active object (with 'speed' being non-zero) is put on a
		map, this value is used as counter. Every 'tick', 'speed' (if
		negative, value is turned positive before) is added to this
		value - if it is bigger than 0 the object 'will do something' and
		this counter is decreased with -1.0.

		By default a normal object will be put on the map with start
		speed 0. It 'will do something' with the next coming 'tick'.
		Setting this value to -1.0 will put it on map but wait one full
		'lifetime' round until it does something.

		A 'fire object' should be put on map with start speed 0 - it
		should try to burn something in the moment it comes in the game.
		A bomb for example should be put with speed -1.0 on the map - it
		will stay then on map until the bomb becomes active - it
		explodes.

		The 'lifetime' round is determinated by speed. A speed of 1.0
		will give a 'lifetime' round of 1 tick - a speed of 0.01 100
		ticks.

		Special case: A negative speed value will add to start speed a
		random value between 0.0 to 0.9 . So, a speed of -0.1 with a
		start speed of -1.0 will result in speed 0.1 and start speed
		between -1.0 and -0.1. This is useful to let a row of same
		objects act in different tick ranges.
		</td>
	</tr>
	<tr>
		<td>sub layer</td>
		<td>@ref obj::sub_layer</td>
		<td>		Extension of the layer attribute. If you have an object with "layer 2
		sub_layer 1" and an object with "layer 2", the former object will be
		rendered immediately following the latter object, thus allowing double
		floor masks, convincing bridges and the like to be created.
		</td>
	</tr>
	<tr>
		<td>sub type</td>
		<td>@ref obj::sub_type</td>
		<td>		This important value is used to define "sub types" for objects of
		the same object type. Examples are weapons, which are all from
		type WEAPON but can be different sub types like slash, cleave,
		two-handed, polearms and so on. This value goes to the client
		too.

		Warning: Not all objects have a sub type and changing it without
		care can corrupt server AND/OR the clients. Normally this is not
		a subject to change outside arch definition.
		</td>
	</tr>
	<tr>
		<td>unpaid</td>
		<td>@ref FLAG_UNPAID</td>
		<td>		An &lt;unpaid&gt; item cannot be used unless the player carried
		it over a shop mat, paying the demanded price. Setting this flag
		makes sense only for items inside shops.
		</td>
	</tr>
	<tr>
		<td>use book GUI</td>
		<td>@ref FLAG_XRAYS</td>
		<td>		If set, instead of printing the sign's contents to text window, use the
		book GUI to show the message, using any fancy formatting books allow.
		</td>
	</tr>
	<tr>
		<td>value</td>
		<td>@ref obj::value</td>
		<td>		Change an object's value.
		</td>
	</tr>
	<tr>
		<td>vertical zoom</td>
		<td>@ref obj::zoom_y</td>
		<td>		How much to vertically zoom the object on the map.
		</td>
	</tr>
	<tr>
		<td>weight</td>
		<td>@ref obj::weight</td>
		<td>		This value defines the object's weight in gram (1000g is 1kg).
		Objects with zero weight are not pickable for players. Still, set
		the "non-pickable" flag for explicitly non-pickable objects.
		</td>
	</tr>
	<tr>
		<td>zoom</td>
		<td>@ref obj::zoom</td>
		<td>		How much to zoom the object on the map.
		</td>
	</tr>
</table>
*/
